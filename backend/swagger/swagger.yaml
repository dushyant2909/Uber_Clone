openapi: 3.0.0
info:
  title: Uber Clone API
  version: 1.0.0
  description: API documentation for the Uber Clone project
servers:
  - url: http://localhost:8000
    description: Development server
paths:
  /api/v1/healthcheck:
    get:
      summary: Perform a health check of the server
      tags:
        - HealthCheck
      responses:
        200:
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  data:
                    type: object
                    properties:
                      success:
                        type: boolean
                        example: true
                  message:
                    type: string
                    example: Ok Tested

  /api/v1/user/register:
    post:
      summary: Register a new user
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: The first name of the user
                  example: John
                lastName:
                  type: string
                  description: The last name of the user
                  example: Doe
                email:
                  type: string
                  description: The email of the user
                  example: john.doe@example.com
                password:
                  type: string
                  description: The password of the user
                  example: securepassword123
      responses:
        201:
          description: User registered successfully
        400:
          description: Validation error
        409:
          description: User already exists

  /api/v1/user/login:
    post:
      summary: Log in an existing user
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The email of the user
                  example: john.doe@example.com
                password:
                  type: string
                  description: The password of the user
                  example: securepassword123
      responses:
        200:
          description: User logged in successfully
          headers:
            Set-Cookie:
              description: Cookies containing access and refresh tokens
              schema:
                type: string
                example: accessToken=eyJhbGciOiJIUzI1NiIsInR5c...; HttpOnly; Secure
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      _id:
                        type: string
                        example: 642c12345d5e4567ab890123
                      firstName:
                        type: string
                        example: John
                      lastName:
                        type: string
                        example: Doe
                      email:
                        type: string
                        example: john.doe@example.com
                  message:
                    type: string
                    example: User logged in successfully
        400:
          description: Validation error
        401:
          description: Invalid password
        404:
          description: User not found

  /api/v1/user/profile:
    get:
      summary: Get user profile
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        200:
          description: User profile fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  data:
                    type: object
                    properties:
                      firstName:
                        type: string
                        example: John
                      lastName:
                        type: string
                        example: Doe
                      email:
                        type: string
                        example: john.doe@example.com
                  message:
                    type: string
                    example: User profile fetched successfully
        401:
          description: Unauthorized access
        404:
          description: User not found

  /api/v1/user/logout:
    post:
      summary: Log out the user
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        200:
          description: User logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  data:
                    type: string
                    nullable: true
                    example: null
                  message:
                    type: string
                    example: User logged out successfully
        401:
          description: Unauthorized access
        404:
          description: User not found

  /api/v1/captain/register:
    post:
      summary: Register a new captain
      tags:
        - Captain
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: The first name of the captain
                  example: John
                lastName:
                  type: string
                  description: The last name of the captain
                  example: Doe
                email:
                  type: string
                  description: The email of the captain
                  example: john.doe@example.com
                password:
                  type: string
                  description: The password of the captain
                  example: securepassword123
                vehicle:
                  type: object
                  description: Vehicle details
                  properties:
                    color:
                      type: string
                      example: Red
                    number:
                      type: string
                      example: ABC-123
                    capacity:
                      type: integer
                      example: 4
                    type:
                      type: string
                      example: Sedan
      responses:
        201:
          description: Captain registered successfully
        400:
          description: Validation error
        409:
          description: Captain already exists

  /api/v1/captain/login:
    post:
      summary: Log in an existing captain
      tags:
        - Captain
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The email of the captain
                  example: john.doe@example.com
                password:
                  type: string
                  description: The password of the captain
                  example: securepassword123
      responses:
        200:
          description: Captain logged in successfully
          headers:
            Set-Cookie:
              description: Cookies containing access and refresh tokens
              schema:
                type: string
                example: accessToken=eyJhbGciOiJIUzI1NiIsInR5c...; HttpOnly; Secure
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      refreshToken:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6Ik...
                      _id:
                        type: string
                        example: 642c12345d5e4567ab890123
                      firstName:
                        type: string
                        example: John
                      lastName:
                        type: string
                        example: Doe
                      email:
                        type: string
                        example: john.doe@example.com
                      vehicle:
                        type: object
                        properties:
                          color:
                            type: string
                            example: Red
                          number:
                            type: string
                            example: ABC-123
                          capacity:
                            type: integer
                            example: 4
                          type:
                            type: string
                            example: Sedan
                  message:
                    type: string
                    example: Captain logged in successfully
        400:
          description: Validation error
        401:
          description: Invalid password
        404:
          description: Captain not found

  /api/v1/captain/profile:
    get:
      summary: Get captain profile
      tags:
        - Captain
      security:
        - bearerAuth: []
      responses:
        200:
          description: Captain profile fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  data:
                    type: object
                    properties:
                      firstName:
                        type: string
                        example: John
                      lastName:
                        type: string
                        example: Doe
                      email:
                        type: string
                        example: john.doe@example.com
                      vehicle:
                        type: object
                        properties:
                          color:
                            type: string
                            example: Red
                          number:
                            type: string
                            example: ABC-123
                          capacity:
                            type: integer
                            example: 4
                          type:
                            type: string
                            example: Sedan
                  message:
                    type: string
                    example: Captain profile fetched successfully
        401:
          description: Unauthorized access
        404:
          description: Captain not found

  /api/v1/captain/logout:
    post:
      summary: Log out the captain
      tags:
        - Captain
      security:
        - bearerAuth: []
      responses:
        200:
          description: Captain logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  data:
                    type: string
                    nullable: true
                    example: null
                  message:
                    type: string
                    example: Captain logged out successfully
        401:
          description: Unauthorized access
        404:
          description: Captain not found
  
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
